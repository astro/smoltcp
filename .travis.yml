language: rust
branches:
  only:
    - master
    - staging
    - trying
matrix:
  include:
    ### Litmus check that we work on stable/beta
    # (we don't, not until slice_rotate lands)
    # - rust: stable
    #   env: FEATURES='default' MODE='test'
    # - rust: beta
    #   env: FEATURES='default' MODE='test'
    ### Test default configurations
    - rust: nightly
      env: FEATURES='default' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    ### Test select feature permutations, chosen to be as orthogonal as possible
    - rust: nightly
      env: FEATURES='std ethernet phy-raw_socket proto-ipv6 socket-udp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet phy-tap_interface proto-ipv6 socket-udp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv4 proto-igmp socket-raw' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv4 socket-udp socket-tcp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv4 proto-dhcpv4 socket-udp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv6 socket-udp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv6 socket-tcp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv4 socket-icmp socket-tcp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='std ethernet proto-ipv6 socket-icmp socket-tcp' MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    ### Test select feature permutations, chosen to be as aggressive as possible
    - rust: nightly
      env: FEATURES='ethernet proto-ipv4 proto-ipv6 socket-raw socket-udp socket-tcp socket-icmp std'
        MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='ethernet proto-ipv4 proto-ipv6 socket-raw socket-udp socket-tcp socket-icmp alloc'
        MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='proto-ipv4 proto-ipv6 socket-raw socket-udp socket-tcp socket-icmp alloc'
        MODE='test'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='ethernet proto-ipv4 proto-ipv6 proto-igmp proto-dhcpv4 socket-raw socket-udp socket-tcp socket-icmp'
        MODE='build'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: MODE='fuzz run' ARGS='packet_parser -- -max_len=1536 -max_total_time=30'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='default' MODE='clippy'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - rust: nightly
      env: FEATURES='default' MODE='check --bench bench'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    - os: osx
      rust: nightly
      env: FEATURES='default' MODE='build'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
  allow_failures:
    # something's screwy with Travis (as usual) and cargo-fuzz dies with a LeakSanitizer error
    # even when it's successful. Keep this in .travis.yml in case it starts working some day.
    - rust: nightly
      env: MODE='fuzz run' ARGS='packet_parser -- -max_len=1536 -max_total_time=30'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    # Clippy sometimes fails to compile and this shouldn't gate merges
    - rust: nightly
      env: FEATURES='default' MODE='clippy'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
    # See if the bench actually breaks
    - rust: nightly
      env: FEATURES='default' MODE='check --bench bench'
      if: (branch = staging OR branch = trying) OR (type = pull_request AND branch = master)
before_script:
  - if [ "$MODE" == "fuzz run" ]; then cargo install cargo-fuzz; fi
  - if [ "$MODE" == "clippy" ]; then cargo install clippy; fi
script:
  - cargo $MODE --no-default-features --features "$FEATURES" $ARGS
